{"version":3,"sources":["colorcycle.js","main.js","ribbons.js"],"names":[],"mappings":"CAAA,SAAA,GACA,YAEA,GAAA,WAAA,SAAA,EAAA,GACA,EAAA,GAAA,EACA,EAAA,GAAA,CAEA,IAAA,GAAA,KAAA,MAAA,IAAA,KAAA,IAAA,GAAA,EAAA,EAAA,GAAA,KACA,EAAA,KAAA,MAAA,IAAA,KAAA,IAAA,GAAA,EAAA,EAAA,GAAA,KACA,EAAA,KAAA,MAAA,IAAA,KAAA,IAAA,GAAA,EAAA,EAAA,GAAA,KACA,EAAA,EACA,OAAA,QAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAEA,MCbA,WACA,YAEA,SAAA,KACA,SAAA,oBAAA,mBAAA,GAAA,GACA,OAAA,oBAAA,OAAA,GAAA,EAEA,IAAA,SAGA,SAAA,iBAAA,mBAAA,GAAA,GACA,OAAA,iBAAA,OAAA,GAAA,MCXA,SAAA,GACA,YAEA,GAAA,QAAA,WACA,KAAA,OAAA,SAAA,cAAA,UACA,KAAA,IAAA,KAAA,OAAA,WAAA,MACA,KAAA,MAAA,OAAA,WACA,KAAA,OAAA,OAAA,YAEA,KAAA,OAAA,MAAA,KAAA,MACA,KAAA,OAAA,OAAA,KAAA,OAEA,KAAA,MAAA,IACA,KAAA,OAAA,EACA,KAAA,OAAA,IACA,KAAA,QAAA,KAAA,OAAA,EACA,KAAA,OAAA,GAEA,KAAA,OAAA,KAAA,SACA,KAAA,YAAA,KAAA,SACA,KAAA,UAAA,EACA,KAAA,WAAA,IAEA,KAAA,IAAA,UAAA,kBACA,KAAA,IAAA,YAAA,WAAA,KAAA,OACA,KAAA,IAAA,yBAAA,UAEA,KAAA,UAGA,EAAA,QAAA,WACA,OAAA,WACA,GAAA,MACA,EAAA,GACA,EAAA,IAAA,KAAA,QAEA,GAAA,GAAA,KAAA,SAAA,EACA,EAAA,GAAA,EAAA,EAEA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,CACA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EACA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAAA,GAAA,KAAA,UAAA,EAAA,EAEA,IAAA,GAEA,MAAA,IAEA,gBAAA,WACA,GAAA,GAAA,KAAA,GAEA,MAAA,OAAA,IACA,KAAA,SAEA,KAAA,OAAA,KAAA,MAAA,MACA,KAAA,OAAA,IACA,KAAA,SAAA,GACA,KAAA,IAAA,YAAA,WAAA,KAAA,OAAA,IAGA,EAAA,OACA,EAAA,UAAA,KAAA,OAAA,KAAA,OAAA,KAAA,QAAA,KAAA,OAAA,GAAA,KAAA,IAAA,KAAA,QAAA,MACA,EAAA,UAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,OAAA,KAAA,OACA,EAAA,YACA,EAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,GAEA,KAAA,GAAA,GAAA,EAAA,GAAA,KAAA,OAAA,OAAA,IACA,EAAA,OAAA,EAAA,KAAA,GAAA,KAAA,OAAA,QACA,EAAA,OAAA,KAAA,OAAA,KAAA,OAAA,KAAA,OAAA,IACA,KAAA,OAAA,KAAA,KAAA,YAAA,KACA,KAAA,OAAA,GAAA,KAAA,YAAA,GACA,KAAA,OAAA,IAAA,GAEA,KAAA,OAAA,IAAA,GAIA,GAAA,YACA,EAAA,OACA,EAAA,SACA,EAAA,UAEA,KAAA,MAAA,KAAA,UAAA,KAAA,aACA,KAAA,UAAA,KAAA,MACA,KAAA,YAAA,KAAA,WAGA,OAAA,WAGA,IAAA,GAFA,GAAA,KAEA,EAAA,EAAA,EAAA,EAAA,IACA,KAAA,iBAGA,uBAAA,WACA,EAAA,cAIA","file":"app.min.js","sourcesContent":["(function(global){\r\n    'use strict';\r\n\r\n    global.colorCycle = function(cycle, offset) {\r\n        offset = offset || 0;\r\n        cycle = cycle || 0;\r\n\r\n        var r = Math.floor(Math.sin(0.3 * cycle + offset + 0) * 127 + 128),\r\n            g = Math.floor(Math.sin(0.3 * cycle + offset + 2) * 127 + 128),\r\n            b = Math.floor(Math.sin(0.3 * cycle + offset + 4) * 127 + 128),\r\n            a = 0.1;\r\n        return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\r\n    };\r\n})(this);","(function(){\r\n    'use strict';\r\n\r\n    function ready(){\r\n        document.removeEventListener('DOMContentLoaded', ready, false);\r\n        window.removeEventListener('load', ready, false);\r\n\r\n        var ribbons = new Ribbons();\r\n    }\r\n\r\n    document.addEventListener('DOMContentLoaded', ready, false);\r\n    window.addEventListener('load', ready, false);\r\n})();","(function(global){\r\n    'use strict';\r\n\r\n    global.Ribbons = function(){\r\n        this.canvas     = document.querySelector('canvas');\r\n        this.ctx        = this.canvas.getContext('2d');\r\n        this.width      = window.innerWidth;\r\n        this.height     = window.innerHeight;\r\n\r\n        this.canvas.width = this.width;\r\n        this.canvas.height = this.height;\r\n\r\n        this.cycle = 6.8;\r\n        this.angleY = 0;\r\n        this.offset = -80;\r\n        this.offsetY = this.height/4;\r\n        this.radius = 10;\r\n\r\n        this.points = this.update();\r\n        this.pointsMorph = this.update();\r\n        this.lastMorph = 0;\r\n        this.morphDelay = 1000;\r\n\r\n        this.ctx.fillStyle = \"rgba(0,0,0,0.1)\";\r\n        this.ctx.strokeStyle = colorCycle(this.cycle);\r\n        this.ctx.globalCompositeOperation = \"lighter\";\r\n\r\n        this.render();\r\n    };\r\n\r\n    global.Ribbons.prototype = {\r\n        update : function(){\r\n            var points = [],\r\n                power = 64,\r\n                displacement = Math.random() * 100;\r\n\r\n            points[0] = Math.random() * displacement;\r\n            points[power] = points[0];\r\n\r\n            for (var i = 1; i < power; i *= 2) {\r\n                for (var j = (power / i) / 2; j < power; j += power / i) {\r\n                    points[j] = ((points[j - (power / i) / 2] + points[j + (power / i) / 2]) / 2) + (Math.random() * -displacement + displacement);\r\n                }\r\n                displacement *= 0.6;\r\n            }\r\n            return points;\r\n        },\r\n        ribbonAnimation : function(){\r\n            var ctx = this.ctx;\r\n\r\n                this.angle -= 0.01;\r\n                this.offset++;\r\n                \r\n                if (this.offset > this.width + 100) {\r\n                    this.offset = -80;\r\n                    this.offsetY += 80;\r\n                    this.ctx.strokeStyle = colorCycle(this.cycle+=3);\r\n                }\r\n                \r\n                ctx.save();\r\n                ctx.translate(this.offset - this.radius, (this.offsetY - this.radius) + Math.sin(this.angleY += 0.01) * 50);\r\n                ctx.transform(1, 0, 0.8, 1, 0, 0);\r\n                ctx.rotate(this.angle);\r\n                ctx.beginPath();\r\n                ctx.moveTo(this.radius, this.radius + this.points[0]);\r\n\r\n                for (var i = 0; i <= this.points.length; i++) {\r\n                    ctx.rotate((Math.PI * 2) / this.points.length);\r\n                    ctx.lineTo(this.radius, this.radius + this.points[i]);\r\n                    if (this.points[i] !== this.pointsMorph[i]) {\r\n                        if (this.points[i] > this.pointsMorph[i]) {\r\n                            this.points[i] -= 0.2;\r\n                        } else {\r\n                            this.points[i] += 0.2;\r\n                        }\r\n                    }\r\n                }\r\n                ctx.closePath();\r\n                ctx.fill();\r\n                ctx.stroke();\r\n                ctx.restore();\r\n\r\n                if (Date.now() > this.lastMorph + this.morphDelay) {\r\n                    this.lastMorph = Date.now();\r\n                    this.pointsMorph = this.update();\r\n                }\r\n        },\r\n        render : function(){\r\n            var that = this;\r\n            \r\n            for(var i = 0; i < 5; i++){\r\n                this.ribbonAnimation();\r\n            }\r\n\r\n            requestAnimationFrame(function(){\r\n                that.render();\r\n            });\r\n        }\r\n    };\r\n})(this);"],"sourceRoot":"/source/"}